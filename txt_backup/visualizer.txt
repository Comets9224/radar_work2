# File processed on: 2025-06-21 17:45:46

# modules/visualizer.py
import matplotlib.pyplot as plt
import numpy as np
import os
import config as cfg


def plot_results(observer_trajectory, true_target_trajectories,
                 measurements_over_time_polar, detections_over_time_global_xy_list_of_lists,
                 all_tracks_info_over_time):
    """
    绘制所有仿真结果的最终图表。
    :param observer_trajectory: 观测者轨迹 [[px, py, vx, vy], ...]
    :param true_target_trajectories: 真实目标轨迹列表 [traj1, traj2, ...], traj_i = [[px, py, vx, vy, ...], ...]
    :param measurements_over_time_polar: 每帧的原始极坐标测量列表 [[frame1_meas], [frame2_meas], ...]
                                       frame_meas = [[r, theta_local, vr], ...]
    :param detections_over_time_global_xy_list_of_lists: 每帧的检测结果列表 (全局XY坐标)
                                          frame_dets = [[det_x1, det_y1], [det_x2, det_y2]...]
    :param all_tracks_info_over_time: 每一帧的航迹信息列表，由 tracker.step() 返回
                                   frame_track_info = [{'id':.., 'history':[[px,py,vx,vy],...], 'state':..}, ...]
    """
    fig, ax = plt.subplots(figsize=(16, 12))
    ax.set_facecolor('black')
    fig.patch.set_facecolor('black')
    ax.spines['bottom'].set_color('gray')
    ax.spines['top'].set_color('gray')
    ax.spines['right'].set_color('gray')
    ax.spines['left'].set_color('gray')
    ax.tick_params(axis='x', colors='gray')
    ax.tick_params(axis='y', colors='gray')

    ax.set_xlabel("X (m) - Global Coordinate System", color='white', fontsize=12)
    ax.set_ylabel("Y (m) - Global Coordinate System", color='white', fontsize=12)
    ax.set_title("Radar Simulation: Trajectories, Detections, and Tracks", color='white', fontsize=16)
    ax.grid(True, linestyle='--', alpha=0.2, color='gray')
    ax.axis('equal')

    # 1. 绘制原始雷达观测点 (灰色x) - 需要转换到全局坐标
    all_meas_global_x, all_meas_global_y = [], []
    for k, frame_polar_measurements in enumerate(measurements_over_time_polar):
        if k < len(observer_trajectory):
            obs_state_k = observer_trajectory[k]
            obs_x_g, obs_y_g, obs_vx_g, obs_vy_g = obs_state_k[:4]
            if not (np.isclose(obs_vx_g, 0) and np.isclose(obs_vy_g, 0)):
                observer_heading_rad = np.arctan2(obs_vy_g, obs_vx_g)
            else:
                observer_heading_rad = 0.0

            for r, theta_local, _ in frame_polar_measurements:
                x_radar = r * np.cos(theta_local)
                y_radar = r * np.sin(theta_local)
                x_global_rel = x_radar * np.cos(observer_heading_rad) - y_radar * np.sin(observer_heading_rad)
                y_global_rel = x_radar * np.sin(observer_heading_rad) + y_radar * np.cos(observer_heading_rad)
                all_meas_global_x.append(obs_x_g + x_global_rel)
                all_meas_global_y.append(obs_y_g + y_global_rel)

    ax.scatter(all_meas_global_x, all_meas_global_y, color='dimgray', marker='x', s=15, alpha=0.4,
               label='Raw Measurements (Global)')

    # 2. 绘制DBSCAN检测结果 (紫色空心圆圈) - 已经是全局坐标
    all_det_global_x, all_det_global_y = [], []
    for frame_global_xy_detections in detections_over_time_global_xy_list_of_lists:  # Iterate through list of lists
        for det_xy in frame_global_xy_detections:  # det_xy is [px_g, py_g]
            all_det_global_x.append(det_xy[0])
            all_det_global_y.append(det_xy[1])
    ax.scatter(all_det_global_x, all_det_global_y, s=40, facecolors='none', edgecolors='magenta', alpha=0.9,
               linewidths=1.5, label='DBSCAN Detections (Global)')

    # 3. 绘制观测者轨迹 (蓝色实线)
    ax.plot(observer_trajectory[:, 0], observer_trajectory[:, 1], color='cyan', linestyle='-',
            label='Observer Trajectory', lw=2)
    ax.plot(observer_trajectory[0, 0], observer_trajectory[0, 1], marker='s', color='cyan', markersize=8,
            label='Observer Start')

    # 4. 绘制真实目标轨迹 (彩色实线)
    for i, traj in enumerate(true_target_trajectories):
        color = cfg.TARGET_COLORS[i % len(cfg.TARGET_COLORS)]
        ax.plot(traj[:, 0], traj[:, 1], color=color, linestyle='-', label=f'True Target {i + 1}', lw=2.5)
        ax.plot(traj[0, 0], traj[0, 1], marker='o', color=color, markersize=8, label=f'Target {i + 1} Start')

    # 5. 绘制最终的跟踪轨迹 (带ID的彩色虚线)
    plotted_track_ids = set()
    if all_tracks_info_over_time and all_tracks_info_over_time[-1]:  # Use tracks from the last frame
        final_frame_tracks_info = all_tracks_info_over_time[-1]
        for track_info in final_frame_tracks_info:
            track_id = track_info['id']
            history_states = np.array(track_info['history'])
            track_state_status = track_info['state']

            color_index = (track_id - 1) % len(cfg.TARGET_COLORS)
            color = cfg.TARGET_COLORS[color_index]

            if history_states.shape[0] > 1 and track_state_status == 'Confirmed':
                label_text = f'Est. Track {track_id}' if track_id not in plotted_track_ids else "_nolegend_"
                ax.plot(history_states[:, 0], history_states[:, 1], color=color, linestyle='--', marker='.',
                        markersize=4, lw=2.0, label=label_text)
                ax.text(history_states[-1, 0] + 1, history_states[-1, 1] + 1, f'ID:{track_id}', color=color,
                        fontsize=10, weight='bold')
                plotted_track_ids.add(track_id)
            elif history_states.shape[0] > 1 and track_state_status == 'Tentative':
                label_text = f'Tent. Track {track_id}' if track_id not in plotted_track_ids else "_nolegend_"
                ax.plot(history_states[:, 0], history_states[:, 1], color=color, linestyle=':', marker='.',
                        markersize=2, lw=1.0, alpha=0.6, label=label_text)
                plotted_track_ids.add(track_id)

    legend = ax.legend(facecolor='black', framealpha=0.8, edgecolor='gray', loc='upper left', fontsize=10)
    for text in legend.get_texts():
        text.set_color('white')

    plot_path = os.path.join(cfg.OUTPUT_PLOTS_DIR, "final_tracking_result.png")
    plt.savefig(plot_path, facecolor='black', dpi=200, bbox_inches='tight')
    print(f"\nFinal plot saved to: {plot_path}")
    # plt.show()