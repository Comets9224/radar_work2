# File processed on: 2025-06-22 10:57:31

# main.py
import numpy as np
import os
import matplotlib.pyplot as plt
import config as cfg
from modules import data_generator, detector, visualizer
from modules.tracker import Tracker
from modules.track import Track  # Import Track to reset _next_id if needed


def run_simulation():
    """主仿真函数，调度所有模块"""
    # cfg.print_config_summary() # 取消注释以打印配置
    data_generator.print_motion_equations()
    print("\nStarting Radar Target Detection and Tracking System Simulation...")

    os.makedirs(cfg.OUTPUT_DIR, exist_ok=True)
    os.makedirs(cfg.OUTPUT_DATA_DIR, exist_ok=True)
    os.makedirs(cfg.OUTPUT_PLOTS_DIR, exist_ok=True)

    print("\n--- Phase 2: Generating Simulation Data ---")
    true_target_trajs, obs_traj, measurements_per_step_polar = data_generator.generate_full_dataset(cfg)
    print(f"Generated {len(measurements_per_step_polar)} frames of data.")

    print("\n--- Phase 3 & 4: Detection and Tracking ---")
    Track._next_id = 1  # 重置航迹ID计数器，以便每次仿真从1开始
    tracker = Tracker()
    all_detections_info_over_time = []
    all_tracks_info_over_time = []

    for k in range(len(measurements_per_step_polar)):
        current_time = k * cfg.DT
        observer_state_k = obs_traj[k]
        raw_measurements_polar_k_current_step = measurements_per_step_polar[k]

        detected_clusters_info_k = detector.detect_targets_by_clustering(
            raw_measurements_polar_k_current_step,
            observer_state_k,
            cfg
        )
        all_detections_info_over_time.append(detected_clusters_info_k)

        tracked_info_for_frame_k = tracker.step(
            detected_clusters_info_k,
            observer_state_k
        )
        all_tracks_info_over_time.append(tracked_info_for_frame_k)

        if (k + 1) % 20 == 0 or k == len(measurements_per_step_polar) - 1:
            num_raw = len(raw_measurements_polar_k_current_step)
            num_detected_clusters = len(detected_clusters_info_k)
            num_active_tracks = len(tracker.tracks)
            num_confirmed = sum(
                1 for t_info in tracked_info_for_frame_k if t_info['state'] == 'Confirmed')  # 从返回的info中统计
            print(
                f"  Time {current_time:.1f}s: RawMeas={num_raw}, Detections={num_detected_clusters}, ActiveTracks={num_active_tracks} (Confirmed={num_confirmed})")

    print("\n--- Phase 5: Visualization ---")

    detections_for_plot_global_xy = []
    for frame_detections_info in all_detections_info_over_time:
        current_frame_xy_detections = []
        for det_info in frame_detections_info:
            current_frame_xy_detections.append(det_info['position_global'])
        detections_for_plot_global_xy.append(current_frame_xy_detections)

    visualizer.plot_results(
        observer_trajectory=obs_traj,
        true_target_trajectories=true_target_trajs,
        measurements_over_time_polar=measurements_per_step_polar,
        detections_over_time_global_xy_list_of_lists=detections_for_plot_global_xy,
        all_tracks_info_over_time=all_tracks_info_over_time
    )

    print("\nSimulation complete. Plot saved in 'output/plots/' directory.")
    # plt.show()


if __name__ == '__main__':
    run_simulation()