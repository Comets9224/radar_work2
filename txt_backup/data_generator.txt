# File processed on: 2025-06-22 15:23:59

# modules/data_generator.py
import numpy as np
import os
import config as cfg  # 确保 config.py 在项目根目录或Python路径中


def generate_true_trajectories(config_obj):
    """根据config中的设置，生成所有目标的真实轨迹"""
    all_trajectories = []
    num_steps = int(config_obj.TOTAL_SIMULATION_TIME / config_obj.DT)

    for target_cfg_item in config_obj.TARGETS_CONFIG:
        model_type = target_cfg_item['model']
        initial_state = target_cfg_item['initial_state']
        F_func, _ = config_obj.get_model_functions(model_type)
        F = F_func(config_obj.DT)

        current_state = initial_state.copy().reshape(-1, 1)
        trajectory = [current_state.flatten()]  # 存储扁平化后的状态

        for _ in range(num_steps - 1):
            current_state = F @ current_state
            trajectory.append(current_state.flatten())

        all_trajectories.append(np.array(trajectory))  # 每个轨迹是一个 (num_steps, state_dim) 的数组
    return all_trajectories  # 返回一个列表，列表中的每个元素是一个numpy数组


def generate_observer_trajectory(config_obj):
    """生成观测者的轨迹"""
    num_steps = int(config_obj.TOTAL_SIMULATION_TIME / config_obj.DT)
    F_func, _ = config_obj.get_model_functions('CV')  # Observer is CV
    F = F_func(config_obj.DT)

    current_state = config_obj.OBSERVER_INITIAL_STATE.copy()  # 已经是 (4,1)
    trajectory = [current_state.flatten()]

    for _ in range(num_steps - 1):
        current_state = F @ current_state
        trajectory.append(current_state.flatten())

    return np.array(trajectory)


def transform_to_radar_polar_coords(target_state_global_xy_vxvy, observer_state_global_xy_vxvy):
    """
    将目标的全局状态 (px, py, vx, vy) 转换为相对于观测者的局部极坐标 (dist, angle_local, rad_vel).
    :param target_state_global_xy_vxvy: 目标全局状态 [px, py, vx, vy] (一维数组)
    :param observer_state_global_xy_vxvy: 观测者全局状态 [obs_px, obs_py, obs_vx, obs_vy] (一维数组)
    :return: [dist, angle_local, rad_vel]
    """
    px, py, vx, vy = target_state_global_xy_vxvy
    obs_px, obs_py, obs_vx, obs_vy = observer_state_global_xy_vxvy

    delta_px = px - obs_px
    delta_py = py - obs_py

    dist = np.sqrt(delta_px ** 2 + delta_py ** 2)

    angle_global_target_relative_to_observer = np.arctan2(delta_py, delta_px)

    if not (np.isclose(obs_vx, 0) and np.isclose(obs_vy, 0)):
        observer_heading_global = np.arctan2(obs_vy, obs_vx)
    else:
        observer_heading_global = 0.0  # 如果观测者静止，航向角可以设为0

    angle_local = angle_global_target_relative_to_observer - observer_heading_global
    angle_local = (angle_local + np.pi) % (2 * np.pi) - np.pi  # 归一化到 [-pi, pi]

    rel_vx_global = vx - obs_vx
    rel_vy_global = vy - obs_vy

    if dist > 1e-6:  # 避免除以非常小的值
        rad_vel = (rel_vx_global * delta_px + rel_vy_global * delta_py) / dist
    else:
        rad_vel = 0.0

    return [dist, angle_local, rad_vel]


def generate_measurements(true_target_trajectories, observer_trajectory, config_obj):
    """生成带有噪声、漏检和范围/FOV限制的观测数据"""
    measurements_per_step = []
    num_steps = len(observer_trajectory)

    for k in range(num_steps):
        observer_state_k_full = observer_trajectory[k]  # (state_dim_obs,)
        observer_state_k_xy_vxvy = observer_state_k_full[:4]

        step_measurements = []

        for traj in true_target_trajectories:
            if k < len(traj):
                target_state_k_full = traj[k]  # (state_dim_target,)
                target_state_k_xy_vxvy = target_state_k_full[:4]  # 取前4个用于坐标转换

                dist, angle_local, rad_vel = transform_to_radar_polar_coords(
                    target_state_k_xy_vxvy, observer_state_k_xy_vxvy
                )

                if np.random.rand() < config_obj.PROB_DETECTION and \
                        config_obj.RADAR_MIN_RANGE <= dist <= config_obj.RADAR_MAX_RANGE and \
                        abs(np.rad2deg(angle_local)) <= config_obj.RADAR_FOV_DEG / 2:
                    # R_MEASUREMENT 是 (3,3)
                    noise = np.random.multivariate_normal(np.zeros(3), config_obj.R_MEASUREMENT)
                    noisy_measurement = [dist + noise[0], angle_local + noise[1], rad_vel + noise[2]]
                    step_measurements.append(noisy_measurement)

        measurements_per_step.append(step_measurements)  # 列表的列表，内部列表元素是 [r, theta, vr]
    return measurements_per_step


def generate_false_alarms(config_obj):
    """在整个仿真时间和空间内生成虚警点"""
    num_steps = int(config_obj.TOTAL_SIMULATION_TIME / config_obj.DT)
    all_false_alarms = []

    for _ in range(num_steps):
        num_clutter = np.random.poisson(config_obj.CLUTTER_RATE)
        step_clutter = []
        for _ in range(num_clutter):
            dist = config_obj.RADAR_MIN_RANGE + np.random.rand() * (
                    config_obj.RADAR_MAX_RANGE - config_obj.RADAR_MIN_RANGE)
            angle_local = np.deg2rad((np.random.rand() - 0.5) * config_obj.RADAR_FOV_DEG)
            rad_vel = (np.random.rand() - 0.5) * 40
            step_clutter.append([dist, angle_local, rad_vel])
        all_false_alarms.append(step_clutter)  # 列表的列表
    return all_false_alarms


def generate_full_dataset(config_obj):
    """生成包含所有元素的完整数据集"""
    observer_traj = generate_observer_trajectory(config_obj)  # (num_steps, state_dim_obs)
    true_target_trajs = generate_true_trajectories(config_obj)  # list of (num_steps, state_dim_target_i)
    true_measurements = generate_measurements(true_target_trajs, observer_traj, config_obj)  # list of lists
    false_alarms = generate_false_alarms(config_obj)  # list of lists

    full_measurements_per_step = []
    for k in range(len(observer_traj)):
        current_true_meas = true_measurements[k] if k < len(true_measurements) else []
        current_false_alarms = false_alarms[k] if k < len(false_alarms) else []

        combined_measurements = current_true_meas + current_false_alarms
        if combined_measurements:  # 只有在非空时才打乱
            np.random.shuffle(combined_measurements)  # shuffle 原地修改列表
        full_measurements_per_step.append(combined_measurements)  # list of lists

    data_path = os.path.join(config_obj.OUTPUT_DATA_DIR, "simulation_data.npz")

    # 修复：创建空的对象数组，然后逐个赋值
    true_trajs_obj_array = np.empty(len(true_target_trajs), dtype=object)
    for i, traj in enumerate(true_target_trajs):
        true_trajs_obj_array[i] = traj

    measurements_obj_array = np.empty(len(full_measurements_per_step), dtype=object)
    for i, meas in enumerate(full_measurements_per_step):
        measurements_obj_array[i] = meas

    np.savez(data_path,
             true_trajs=true_trajs_obj_array,
             obs_traj=observer_traj,  # 这是一个规则的 NumPy 数组，可以直接保存
             measurements=measurements_obj_array)

    return true_target_trajs, observer_traj, full_measurements_per_step
def print_motion_equations():
    """打印运动学方程和示例矩阵"""
    dt_symbol = 'Δt'  # pylint: disable=unused-variable
    print("\n--- Kinematic Equations ---")

    F_cv_func, _ = cfg.get_model_functions('CV')
    F_cv_example = F_cv_func(1)
    print("\nObserver / Target - Constant Velocity (CV):")
    print(f"  State Transition Matrix F_cv (dt=1s):\n{F_cv_example}")

    F_ca_func, _ = cfg.get_model_functions('CA')
    F_ca_example = F_ca_func(1)
    print("\nTarget - Constant Acceleration (CA):")
    print(f"  State Transition Matrix F_ca (dt=1s):\n{F_ca_example}")
    print("--------------------")